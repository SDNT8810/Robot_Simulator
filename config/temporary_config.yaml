timing:
  time_step: 0.02  # Simulation and control time step (s)
  total_time: 10.5  # Total simulation time (s)
visualization:
  enabled: true  # Enable visualization
  show_trajectory: true  # Show trajectory in visualization
  show_lidar_beams: true  # Show lidars in visualization
  lidar_params:  # Parameters for LIDAR
    num_beams: 120  # Increased from 16 for better resolution
    max_range: 5.0  # Reduced from 10.0 for closer obstacle detection
    fov: 6.28319  # Field of view in radians (2*pi for 360 degrees)
  plots:  # List of plots to visualize (State, Velocity, Error, SafetyViolation, ControlInput)
    - State: false  # Robot Velocity State plot
    - Velocity: true  # Speed and Angular Velocity plot
    - Error: false  # Error plot
    - SafetyViolation: false  # Safety violation plot
    - ControlInput: false  # Control input plot
    - fuzzyMF: false # subplot 222
    - fuzzyPolar: true # subplot 221
    - fuzzyFunctions: true # Fuzzy functions plot (subplot 212)
    
robot:
  model: "kinematics"  # Type of simulation (kinematics, dynamics)
controller:
  mode: "MCP"  
  type: "PID"  # Use the FastMPC, BiLVLMPC, SimplifiedMPC, PID controller
  mpc:
    # Prediction horizon
    prediction_horizon: 20  # Increased from 15 for longer planning
    control_horizon: 5  # Increased from 1 for smoother control
    time_step: 0.1  # Reduced from 0.2 for more precise control
  
scenario:
  # Scenario name
  name: "to_goal"  # "circle" or "to_goal" # Name of the scenario
  circle:
    initial_position: [0.0, 0.0, 30.0]  # Initial position [x, y, theta]
    radius: 4.0  # Radius of the circle (m)
    speed: 2.99   # Further increased target speed for more agility testing
  to_goal:
    # Path to goal
    initial_position: [0.0, -3.0, 0.0]  # Initial position [x, y, theta]
    initial_speed: [0.0, 0.0, 0.0]  # Initial speed [vx, vy, omega]
    goal: [0.0, 7.0]  # Goal position [x, y]
    desired_velocity: 1.0  # Reduced from 1.0 to start slower
